{"version":3,"sources":["./src/accounts/components/account-details-dialog/account-details-dialog.component.html","./src/accounts/components/accounts-list/accounts-list.component.html","./src/accounts/components/create-account/create-account.component.html","./src/accounts/containers/accounts-list-container/accounts-list-container.component.html","./src/accounts/containers/create-account-container/create-account-container.component.html","./src/accounts/accounts-routing.module.ts","./src/accounts/accounts.module.ts","./src/accounts/components/account-details-dialog/account-details-dialog.component.scss","./src/accounts/components/account-details-dialog/account-details-dialog.component.ts","./src/accounts/components/accounts-list/accounts-list.component.scss","./src/accounts/components/accounts-list/accounts-list.component.ts","./src/accounts/components/create-account/create-account.component.scss","./src/accounts/components/create-account/create-account.component.ts","./src/accounts/components/index.ts","./src/accounts/containers/accounts-list-container/accounts-list-container.component.scss","./src/accounts/containers/accounts-list-container/accounts-list-container.component.ts","./src/accounts/containers/create-account-container/create-account-container.component.scss","./src/accounts/containers/create-account-container/create-account-container.component.ts","./src/accounts/containers/index.ts","./src/accounts/form-builders/account.builder.ts","./src/accounts/form-builders/index.ts"],"names":[],"mappings":"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","file":"src-accounts-accounts-module.js","sourcesContent":["export default \"<h1 mat-dialog-title>Account Details</h1>\\n<section mat-dialog-content>\\n  <mat-tab-group>\\n    <mat-tab label=\\\"Account Details\\\">\\n      <mat-list>\\n        <mat-list-item>\\n          <mat-icon matListIcon>info</mat-icon>\\n          <h3 matLine>{{ account.title }}</h3>\\n          <p matLine>\\n            <span class=\\\"text-caption\\\">Account Title</span>\\n          </p>\\n        </mat-list-item>\\n        <mat-list-item>\\n          <mat-icon matListIcon>card</mat-icon>\\n          <h3 matLine>{{ account.accountType }}</h3>\\n          <p matLine>\\n            <span class=\\\"text-caption\\\">Account Type</span>\\n          </p>\\n        </mat-list-item>\\n        <mat-list-item>\\n          <mat-icon matListIcon>today</mat-icon>\\n          <h3 matLine>{{ account.opened | date: 'm/d/yy' }}</h3>\\n          <p matLine>\\n            <span class=\\\"text-caption\\\">Account Opened Date</span>\\n          </p>\\n        </mat-list-item>\\n        <mat-list-item>\\n          <mat-icon matListIcon>attach_money</mat-icon>\\n          <h3 matLine>\\n            {{ account.currBalance | currency: 'USD':'symbol':'2.2-2' }}\\n          </h3>\\n          <p matLine>\\n            <span class=\\\"text-caption\\\">Current Balance</span>\\n          </p>\\n        </mat-list-item>\\n        <mat-list-item>\\n          <mat-icon matListIcon>\\n            {{ account.active ? 'check' : 'warning' }}\\n          </mat-icon>\\n          <p matLine>\\n            <span class=\\\"text-caption\\\">Account Active</span>\\n          </p>\\n        </mat-list-item>\\n      </mat-list>\\n    </mat-tab>\\n    <mat-tab label=\\\"Transactions\\\">\\n      <mat-list>\\n        <mat-list-item *ngFor=\\\"let txn of account.transactions\\\">\\n          <mat-icon matListIcon>\\n            {{ txn.transactionType === 'DEBIT' ? 'arrow_upward' : 'arrow_downward' }}\\n          </mat-icon>\\n          <h3 matLine>{{ txn.amount }}</h3>\\n          <h4 matLine>{{ txn.title }}</h4>\\n          <p matLine>\\n            <span class=\\\"text-caption\\\">\\n              {{ txn.transactionType + ', ' + txn.paymentType + ', ' + (txn.transactionDate | date: 'm/d/yy') }}\\n            </span>\\n          </p>\\n        </mat-list-item>\\n      </mat-list>\\n    </mat-tab>\\n  </mat-tab-group>\\n</section>\\n<section mat-dialog-actions>\\n  <span class=\\\"fill-space\\\"></span>\\n  <button mat-icon-button color=\\\"warn\\\" (click)=\\\"onCloseClick()\\\">\\n    <mat-icon>close</mat-icon>\\n  </button>\\n</section>\\n\"","export default \"<mat-card>\\n  <mat-card-header>\\n    <mat-card-title>\\n      <h1>Accounts</h1>\\n    </mat-card-title>\\n  </mat-card-header>\\n  <mat-card-content>\\n    <mat-nav-list>\\n    <mat-list-item routerLink=\\\"/accounts/create\\\">\\n      <mat-icon matListIcon>add</mat-icon>\\n      <a matLine>Create Account</a>\\n    </mat-list-item>\\n    </mat-nav-list>\\n    <!-- Form Container for our filter form group for the user to filter the accounts list -->\\n    <form novalidate [formGroup]=\\\"filterTableFormGroup\\\">\\n      <mat-form-field appearance=\\\"outline\\\" class=\\\"full-width-input\\\">\\n        <mat-label>Accounts Filter</mat-label>\\n        <span matPrefix><mat-icon>search</mat-icon></span>\\n        <input matInput formControlName=\\\"filter\\\" placeholder=\\\"Search by account Title\\\" />\\n      </mat-form-field>\\n    </form>\\n    <!-- mat tabe container. assign our data source, add sorting, assign the tracking function -->\\n    <mat-table [dataSource]=\\\"accountsDataSource\\\" matSort [trackBy]=\\\"trackByFn\\\">\\n      <!-- define our table columns. you must have a column for every column defined in your columns string array -->\\n      <!-- the matColumnDef value needs to be the value of a column you defined -->\\n      <!-- the order of the columns is determined by the order specified in the columns() value -->\\n      <ng-container matColumnDef=\\\"id\\\">\\n        <!-- define the header for the id column. add sorting -->\\n        <mat-header-cell *matHeaderCellDef mat-sort-header>\\n          Id\\n        </mat-header-cell>\\n        <!-- define the cell that will contain the data for each record in the data source -->\\n        <!-- row gives you access to the Account record for a given row in the data source -->\\n        <mat-cell *matCellDef=\\\"let row\\\">\\n          {{ row.id }}\\n        </mat-cell>\\n      </ng-container>\\n\\n      <ng-container matColumnDef=\\\"title\\\">\\n        <mat-header-cell *matHeaderCellDef mat-sort-header>\\n          Title\\n        </mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let row\\\">\\n          {{ row.title }}\\n        </mat-cell>\\n      </ng-container>\\n\\n      <ng-container matColumnDef=\\\"opened\\\">\\n        <mat-header-cell *matHeaderCellDef mat-sort-header>\\n          Opened\\n        </mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let row\\\">\\n          {{ row.opened | date: 'm/d/yy' }}\\n        </mat-cell>\\n      </ng-container>\\n\\n      <ng-container matColumnDef=\\\"currBalance\\\">\\n        <mat-header-cell *matHeaderCellDef mat-sort-header>\\n          Balance\\n        </mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let row\\\">\\n          {{ row.currBalance | currency: 'USD':'symbol':'2.2-2' }}\\n        </mat-cell>\\n      </ng-container>\\n\\n      <ng-container matColumnDef=\\\"info\\\">\\n        <mat-header-cell *matHeaderCellDef mat-sort-header>\\n          Details\\n        </mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let row\\\">\\n          <button mat-icon-button color=\\\"accent\\\" (click)=\\\"onViewAccountDetails(row)\\\">\\n            <mat-icon>info</mat-icon>\\n          </button>\\n        </mat-cell>\\n      </ng-container>\\n\\n      <!-- define the header row for the given columns -->\\n      <mat-header-row *matHeaderRowDef=\\\"columns\\\"></mat-header-row>\\n      <!-- define the rows and columns for each row in the data source -->\\n      <mat-row *matRowDef=\\\"let row; columns: columns\\\"></mat-row>\\n    </mat-table>\\n    <!-- add table pagination -->\\n    <mat-paginator #paginator [pageSize]=\\\"25\\\" [pageSizeOptions]=\\\"[5, 10, 15, 25, 50, 100]\\\" [showFirstLastButtons]=\\\"true\\\"> </mat-paginator>\\n  </mat-card-content>\\n</mat-card>\\n\"","export default \"<mat-card>\\n  <mat-card-header>\\n    <mat-card-title>\\n      Create Account\\n    </mat-card-title>\\n  </mat-card-header>\\n  <mat-card-content>\\n    <form novalidate [formGroup]=\\\"accountFormGroup\\\" (submit)=\\\"onSubmit(accountFormGroup.value)\\\">\\n      <mat-form-field appearance=\\\"outline\\\" class=\\\"full-width-input\\\" color=\\\"primary\\\">\\n        <mat-label>Account Title</mat-label>\\n        <input matInput formControlName=\\\"title\\\" required />\\n        <mat-error *ngIf=\\\"accountFormGroup.controls['title'].invalid\\\">\\n          Account Title is required\\n        </mat-error>\\n      </mat-form-field>\\n      <mat-form-field appearance=\\\"outline\\\" class=\\\"full-width-input\\\" color=\\\"primary\\\">\\n        <mat-label>Account Type</mat-label>\\n        <mat-select required formControlName=\\\"accountType\\\">\\n          <mat-option *ngFor=\\\"let accountType of accountTypes\\\" [value]=\\\"accountType\\\">\\n            {{ accountType }}\\n          </mat-option>\\n        </mat-select>\\n        <mat-error *ngIf=\\\"accountFormGroup.controls['accountType'].invalid\\\">\\n          Account Type is required\\n        </mat-error>\\n      </mat-form-field>\\n      <mat-form-field appearance=\\\"outline\\\" class=\\\"full-width-input give-me-some-space top margin-25\\\" color=\\\"primary\\\">\\n        <mat-label>When was the Account Opened</mat-label>\\n        <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\" formControlName=\\\"opened\\\" required />\\n        <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n        <mat-datepicker #picker></mat-datepicker>\\n        <mat-error *ngIf=\\\"accountFormGroup.controls['opened'].invalid\\\">\\n          Account Opened date is required\\n        </mat-error>\\n      </mat-form-field>\\n      <mat-form-field\\n        appearance=\\\"outline\\\"\\n        class=\\\"full-width-input give-me-some-space top margin-25\\\"\\n        color=\\\"primary\\\"\\n        hintLabel=\\\"What is the current balance in the account\\\"\\n      >\\n        <mat-label>Account Current Balance</mat-label>\\n        <span matPrefix><mat-icon>attach_money</mat-icon></span>\\n        <input matInput formControlName=\\\"currBalance\\\" type=\\\"number\\\" required />\\n        <mat-error *ngIf=\\\"accountFormGroup.controls['currBalance'].invalid\\\">\\n          Account Current Balance is required\\n        </mat-error>\\n      </mat-form-field>\\n      <section class=\\\"full-width-input give-me-some-space top margin-25\\\">\\n        <mat-checkbox formControlName=\\\"active\\\">Account is Active</mat-checkbox>\\n      </section>\\n      <section class=\\\"full-width-input give-me-some-space top margin-25\\\">\\n        <button type=\\\"submit\\\" mat-raised-button color=\\\"primary\\\" [disabled]=\\\"accountFormGroup.invalid\\\">\\n          Create Account\\n        </button>\\n      </section>\\n    </form>\\n  </mat-card-content>\\n</mat-card>\\n\"","export default \"<app-accounts-list\\n  [accounts]=\\\"accounts$ | async\\\"\\n  (viewAccountDetails)=\\\"viewAccountDetails($event)\\\"\\n  *ngIf=\\\"!(loading$ | async)\\\"\\n></app-accounts-list>\\n<!-- indeterminate progress bar --->\\n<section *ngIf=\\\"loading$ | async\\\">\\n  <h1 class=\\\"display-1\\\">Loading Accounts</h1>\\n  <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\n</section>\\n\"","export default \"<app-create-account\\n  [accountTypes]=\\\"accountTypes$ | async\\\"\\n  (createAccountEmitter)=\\\"createAccount($event)\\\"\\n></app-create-account>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport * as fromContainers from './containers';\n\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    component: fromContainers.AccountsListContainerComponent\n  },\n  {\n    path: 'create',\n    pathMatch: 'full',\n    component: fromContainers.CreateAccountContainerComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AccountsRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { MaterialDesignModule } from 'src/material-design/material-design.module';\n\nimport { AccountsRoutingModule } from './accounts-routing.module';\n\nimport * as fromComponents from './components';\nimport * as fromContainers from './containers';\nimport * as fromBuilders from './form-builders';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, MaterialDesignModule, AccountsRoutingModule],\n  providers: [...fromBuilders.builders],\n  declarations: [...fromComponents.components, ...fromContainers.containers],\n  entryComponents: [...fromComponents.entryComponents],\n  exports: [...fromComponents.components, ...fromContainers.containers]\n})\nexport class AccountsModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYWNjb3VudHMvY29tcG9uZW50cy9hY2NvdW50LWRldGFpbHMtZGlhbG9nL2FjY291bnQtZGV0YWlscy1kaWFsb2cuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, ChangeDetectionStrategy, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { Account } from 'src/app/models/account.model';\n\n@Component({\n  selector: 'app-account-details-dialog',\n  templateUrl: './account-details-dialog.component.html',\n  styleUrls: ['./account-details-dialog.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AccountDetailsDialogComponent {\n  constructor(\n    // MatDialogRef of this dialog component\n    // gives us ref access to the dialog so we can close it and return data as necessar\n    // it contains its own set of lifecycle hooks for this dialog component\n    private dialogRef: MatDialogRef<AccountDetailsDialogComponent>,\n    // when the dialog is opened it is passed an account object\n    // this injects that data so we can view the Account details\n    // this is an object and can be passed multiple pieces of data\n    @Inject(MAT_DIALOG_DATA) public account: Account\n  ) {}\n\n  onCloseClick() {\n    // close the dialog\n    // if you need to pass data back to the calling component,\n    // you pass it to the close method\n    this.dialogRef.close();\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYWNjb3VudHMvY29tcG9uZW50cy9hY2NvdW50cy1saXN0L2FjY291bnRzLWxpc3QuY29tcG9uZW50LnNjc3MifQ== */\"","import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  Input,\n  AfterViewInit,\n  OnDestroy,\n  ViewChild,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { distinctUntilChanged, debounceTime, takeUntil } from 'rxjs/operators';\nimport { isNullOrUndefined } from 'util';\n\nimport { Account } from 'src/app/models/account.model';\n\n@Component({\n  selector: 'app-accounts-list',\n  templateUrl: './accounts-list.component.html',\n  styleUrls: ['./accounts-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AccountsListComponent implements OnInit, AfterViewInit, OnDestroy {\n  private _accountsDataSource: MatTableDataSource<Account> = new MatTableDataSource<Account>();\n  private _unsubscribe = new Subject<void>();\n\n  filterTableFormGroup: FormGroup = null;\n\n  @Input() set accounts(accounts: Account[]) {\n    if (!isNullOrUndefined(accounts)) {\n      // set data on data source to input accounts\n      this._accountsDataSource.data = accounts;\n    }\n  }\n\n  get accountsDataSource(): MatTableDataSource<Account> {\n    return this._accountsDataSource;\n  }\n\n  get columns(): string[] {\n    // return a string array of the columns in the table\n    // the order of these values will be the order your columns show up in\n    return ['id', 'title', 'opened', 'currBalance', 'info'];\n  }\n\n  // add ViewChild support for the table MatPagionator\n  // allows us to register the paginator with the MatTable\n  @ViewChild(MatPaginator, { static: true })\n  paginator: MatPaginator;\n  // add ViewChild support fot the table column sorting\n  // allows us to register the table column sorting with the Mat Table\n  @ViewChild(MatSort, { static: true })\n  sort: MatSort;\n\n  @Output() viewAccountDetails: EventEmitter<Account> = new EventEmitter<Account>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    // build the filter form group\n    // add a entry for the user to enter filter text\n    this.filterTableFormGroup = this.fb.group({\n      filter: [null, null]\n    });\n    // subscribe to changes that occur on the filterTableFormGroup.filter form control\n    // when these changes occur, filter the results of the table\n    this.filterTableFormGroup.controls['filter'].valueChanges\n      .pipe(\n        debounceTime(1500), // wait 1.5sec for the user to finish entering info before applying filter\n        distinctUntilChanged(), // only apply the filter if the entered value is distinct\n        takeUntil(this._unsubscribe) // once _unsubscribe is applied, stop the listener\n      )\n      .subscribe((value: string) => {\n        if (!isNullOrUndefined(value)) {\n          // apply the filter to the data source\n          value = value.trim().toLowerCase();\n          this.accountsDataSource.filter = value;\n        }\n      });\n  }\n\n  ngAfterViewInit() {\n    // register paginator & sort view shildren with the table data source\n    this.accountsDataSource.paginator = this.paginator;\n    this.accountsDataSource.sort = this.sort;\n  }\n\n  ngOnDestroy() {\n    // when the component is destroyed, call to _unsubscribe\n    // this will stop any active listeners on the component and free up resources\n    this._unsubscribe.next();\n    this._unsubscribe.complete();\n  }\n\n  // adds tracking for the data source for faster filtering, and sorting\n  trackByFn(account: Account) {\n    return account.id;\n  }\n\n  onViewAccountDetails(account: Account) {\n    // when clicked, output an event to the parent container to view the account details\n    // we do this so that the container can be responsible for how it wants to process this event\n    // i.e. open a dialog or maybe route to a details page\n    this.viewAccountDetails.emit(account);\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYWNjb3VudHMvY29tcG9uZW50cy9jcmVhdGUtYWNjb3VudC9jcmVhdGUtYWNjb3VudC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, ChangeDetectionStrategy, Output, EventEmitter, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Account } from 'src/app/models/account.model';\nimport * as fromBuilders from 'src/accounts/form-builders';\nimport { isNullOrUndefined } from 'util';\n\n@Component({\n  selector: 'app-create-account',\n  templateUrl: './create-account.component.html',\n  styleUrls: ['./create-account.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CreateAccountComponent implements OnInit {\n  private _accountTypes: string[] = null;\n\n  accountFormGroup: FormGroup = null;\n\n  @Input() set accountTypes(types: string[]) {\n    if (!isNullOrUndefined(types)) {\n      this._accountTypes = types;\n    }\n  }\n  get accountTypes(): string[] {\n    return this._accountTypes;\n  }\n\n  @Output() createAccountEmitter: EventEmitter<Account> = new EventEmitter<Account>();\n\n  constructor(private accountBuilder: fromBuilders.AccountBuilder) {}\n\n  ngOnInit() {\n    // build the account form group using the AccountBuilder\n    this.accountFormGroup = this.accountBuilder.build();\n  }\n\n  onSubmit(account: Account) {\n    // emit the user-submitted account to the calling container\n    this.createAccountEmitter.emit(account);\n  }\n}\n","import { AccountsListComponent } from './accounts-list/accounts-list.component';\nimport { CreateAccountComponent } from './create-account/create-account.component';\nimport { AccountDetailsDialogComponent } from './account-details-dialog/account-details-dialog.component';\n\nexport const components: any[] = [\n  AccountsListComponent,\n  CreateAccountComponent,\n  AccountDetailsDialogComponent\n];\n\nexport const entryComponents: any[] = [AccountDetailsDialogComponent];\n\nexport * from './accounts-list/accounts-list.component';\nexport * from './create-account/create-account.component';\nexport * from './account-details-dialog/account-details-dialog.component';\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYWNjb3VudHMvY29udGFpbmVycy9hY2NvdW50cy1saXN0LWNvbnRhaW5lci9hY2NvdW50cy1saXN0LWNvbnRhaW5lci5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Observable, of, Subject, BehaviorSubject } from 'rxjs';\n\nimport { Account } from 'src/app/models/account.model';\nimport { Transaction } from 'src/app/models/transaction.model';\nimport * as fromComponents from 'src/accounts/components';\n\n@Component({\n  selector: 'app-accounts-list-container',\n  templateUrl: './accounts-list-container.component.html',\n  styleUrls: ['./accounts-list-container.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AccountsListContainerComponent implements OnInit {\n  accounts$: Observable<Account[]> = of([\n    <Account>{\n      id: 1,\n      title: 'Primary Checking',\n      accountType: 'CHECKING',\n      opened: new Date('2019-01-01'),\n      currBalance: 1500,\n      active: true\n    },\n    <Account>{\n      id: 2,\n      title: 'Primary Savings',\n      accountType: 'SAVINGS',\n      opened: new Date('2019-01-01'),\n      currBalance: 10000,\n      active: true\n    },\n    <Account>{\n      id: 3,\n      title: 'Credit Card',\n      accountType: 'CREDIT CARD',\n      opened: new Date('2019-01-01'),\n      currBalance: 150,\n      active: true\n    }\n  ]);\n  loading$: Subject<boolean> = new BehaviorSubject<boolean>(true);\n\n  constructor(private dialog: MatDialog) {}\n\n  ngOnInit() {\n    // wait 2sec then set loading$ to false\n    setTimeout(() => {\n      this.loading$.next(false);\n    }, 2000);\n  }\n\n  viewAccountDetails(account: Account) {\n    // add transactions\n    account.transactions = [\n      <Transaction>{\n        id: 1,\n        title: 'Gas',\n        transactionDate: new Date(),\n        amount: 25.45,\n        transactionType: 'CREDIT',\n        paymentType: 'DEBIT'\n      },\n      <Transaction>{\n        id: 2,\n        title: 'Coffee',\n        transactionDate: new Date(),\n        amount: 4.67,\n        transactionType: 'CREDIT',\n        paymentType: 'CREDIT'\n      },\n      <Transaction>{\n        id: 3,\n        title: 'Receive Rent Payment',\n        transactionDate: new Date('2019-01-14'),\n        amount: 750,\n        transactionType: 'DEBIT',\n        paymentType: 'CHECK'\n      }\n    ];\n    // open the account-details-dialog component to display the account details\n    const dialogRef = this.dialog.open(fromComponents.AccountDetailsDialogComponent, {\n      data: account,\n      width: '75%'\n    });\n    dialogRef.afterClosed().subscribe(() => {\n      console.log('DIALOG CLOSED');\n    });\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYWNjb3VudHMvY29udGFpbmVycy9jcmVhdGUtYWNjb3VudC1jb250YWluZXIvY3JlYXRlLWFjY291bnQtY29udGFpbmVyLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Observable, of } from 'rxjs';\n\nimport { Account } from 'src/app/models/account.model';\n\n@Component({\n  selector: 'app-create-account-container',\n  templateUrl: './create-account-container.component.html',\n  styleUrls: ['./create-account-container.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CreateAccountContainerComponent implements OnInit {\n  accountTypes$: Observable<string[]> = of(['CHECKING', 'SAVINGS', 'CREDIT CARD', 'LOAN', 'MISC']);\n\n  // snackbar is an Injectable component. Use DI to inject an instance of MatSnackBar\n  // we will use this to open a simple snackbar to display the data\n  constructor(private snackBar: MatSnackBar) {}\n\n  ngOnInit() {}\n\n  private openSnackBarForAccountCreate(account: Account) {\n    // use the inject MatSnackBar instance to open a snack bar\n    // display the title of the account and append: \" was created\"\n    // dispay the snackbar for 2sec (2000ms)\n    const message = `${account.title} was created!`;\n    const action = 'Party!';\n    this.snackBar.open(message, action, {\n      duration: 2000\n    });\n  }\n\n  createAccount(account: Account) {\n    // open a snackbar that tells the user their account was created\n    this.openSnackBarForAccountCreate(account);\n  }\n}\n","import { AccountsListContainerComponent } from './accounts-list-container/accounts-list-container.component';\nimport { CreateAccountContainerComponent } from './create-account-container/create-account-container.component';\n\nexport const containers: any[] = [\n  AccountsListContainerComponent,\n  CreateAccountContainerComponent\n];\n\nexport * from './accounts-list-container/accounts-list-container.component';\nexport * from './create-account-container/create-account-container.component';\n","import { Injectable } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Injectable()\nexport class AccountBuilder {\n  constructor(private fb: FormBuilder) {}\n\n  /**\n   * Build and return a `FormGroup` with the required fields and\n   * validation for the Account creation\n   */\n  public build(): FormGroup {\n    return this.fb.group({\n      id: [null, null],\n      title: [null, Validators.required],\n      accountType: [null, Validators.required],\n      opened: [null, Validators.required],\n      currBalance: [0.0, Validators.required],\n      active: [true, Validators.required]\n    });\n  }\n}\n","import { AccountBuilder } from './account.builder';\n\nexport const builders: any[] = [AccountBuilder];\n\nexport * from './account.builder';\n"],"sourceRoot":"webpack:///"}